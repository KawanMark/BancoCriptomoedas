/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import DAO.ClienteDAO;
import static java.lang.Math.random;
import java.sql.Connection;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import javax.swing.JOptionPane;
import model.Cotacao;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Map;

/**
 *
 * @author kawan
 */
public class JanelaCotacao extends javax.swing.JFrame {
     private Cotacao cotacao;
     private ClienteDAO ClienteDAO;
    private Connection conn;
    /**
     * Creates new form JanelaCotacao
     */
    public JanelaCotacao() throws SQLException {
        initComponents();
        this.conn = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/cliente",
            "postgres", "fei");
        this.cotacao = Cotacao.obterCotacaoAtual(conn);
        this.ClienteDAO = new ClienteDAO(conn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btAtualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblCotacao = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setText("Atualizar cotações");

        btAtualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btAtualizar.setText("Atualizar");
        btAtualizar.setToolTipText("");
        btAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarActionPerformed(evt);
            }
        });

        lblCotacao.setColumns(20);
        lblCotacao.setRows(5);
        jScrollPane1.setViewportView(lblCotacao);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(btAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarActionPerformed
         try {
        atualizarCotacoes();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar cotações.");
    }
    }//GEN-LAST:event_btAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
private void atualizarCotacoes() throws SQLException {
    // Obter a data e hora atual
    LocalDateTime agora = LocalDateTime.now(ZoneId.of("America/Sao_Paulo"));
    DateTimeFormatter formatadorDataHora = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
    String dataHoraAtual = agora.format(formatadorDataHora);

    // Atualizar as cotações na classe Cotacao

    this.cotacao = Cotacao.obterCotacaoAtual(conn);
    
    Map<String, Double> cotacoesAtualizadas = cotacao.atualizarCotacoes();

    // Obter as cotações atualizadas
    double cotacaoBitcoin = cotacoesAtualizadas.get("bitcoin");
    double cotacaoEthereum = cotacoesAtualizadas.get("ethereum");
    double cotacaoRipple = cotacoesAtualizadas.get("ripple");
    
    ClienteDAO clienteDAO = new ClienteDAO(conn); 
    clienteDAO.salvarCotacoes(cotacaoBitcoin, cotacaoEthereum, cotacaoRipple);

    String cotacaoBitcoinFormatada = String.format("%.2f", cotacaoBitcoin);
    String cotacaoEthereumFormatada = String.format("%.2f", cotacaoEthereum);
    String cotacaoRippleFormatada = String.format("%.2f", cotacaoRipple);

    // Exiba as cotações formatadas
    lblCotacao.setText("Cotação Bitcoin: " + cotacaoBitcoinFormatada + "\n"
                     + "Cotação Ethereum: " + cotacaoEthereumFormatada + "\n"
                     + "Cotação Ripple: " + cotacaoRippleFormatada + "\n"
                     + "Data e Hora da Atualização: " + dataHoraAtual);
}



    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea lblCotacao;
    // End of variables declaration//GEN-END:variables
}
